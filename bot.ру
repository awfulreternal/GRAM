import random
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# Настройка базы данных
conn = sqlite3.connect('casino.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY, 
                    balance INTEGER DEFAULT 0, 
                    deposit INTEGER DEFAULT 0, 
                    status TEXT DEFAULT 'No status')''')
cursor.execute('''CREATE TABLE IF NOT EXISTS businesses (
                    user_id INTEGER, 
                    business_type TEXT, 
                    level INTEGER DEFAULT 1,
                    PRIMARY KEY(user_id, business_type))''')
cursor.execute('''CREATE TABLE IF NOT EXISTS tournament (
                    user_id INTEGER, 
                    grams INTEGER DEFAULT 0, 
                    PRIMARY KEY(user_id))''')
conn.commit()

# Функция для получения баланса пользователя
def get_balance(user_id):
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# Функция для обновления баланса пользователя
def update_balance(user_id, amount):
    current_balance = get_balance(user_id)
    new_balance = current_balance + amount
    cursor.execute('INSERT OR REPLACE INTO users (user_id, balance) VALUES (?, ?)', (user_id, new_balance))
    conn.commit()

# Функция для получения депозита пользователя
def get_deposit(user_id):
    cursor.execute('SELECT deposit FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# Функция для обновления депозита пользователя
def update_deposit(user_id, amount):
    current_deposit = get_deposit(user_id)
    new_deposit = current_deposit + amount
    cursor.execute('INSERT OR REPLACE INTO users (user_id, deposit) VALUES (?, ?)', (user_id, new_deposit))
    conn.commit()

# Функция для получения статуса пользователя
def get_status(user_id):
    cursor.execute('SELECT status FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 'No status'

# Функция для обновления статуса пользователя
def update_status(user_id, status):
    cursor.execute('UPDATE users SET status = ? WHERE user_id = ?', (status, user_id))
    conn.commit()

# Команда /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    await update.message.reply_text("Добро пожаловать в казино! Ваш текущий баланс: 0 GRAM")

# Команда /balance
async def balance(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    deposit = get_deposit(user_id)
    status = get_status(user_id)
    await update.message.reply_text(f"Ваш текущий баланс: {balance} GRAM\nВаш депозит: {deposit} GRAM\nВаш статус: {status}")

# Команда /deposit
async def deposit(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("Использование: /deposit сумма")
        return
    
    deposit_amount = int(args[0])
    balance = get_balance(user_id)
    if deposit_amount > balance:
        await update.message.reply_text("Недостаточно средств на балансе.")
        return
    
    update_balance(user_id, -deposit_amount)
    update_deposit(user_id, deposit_amount)
    await update.message.reply_text(f"Вы успешно внесли {deposit_amount} GRAM на депозит. Текущий баланс: {get_balance(user_id)} GRAM, депозит: {get_deposit(user_id)} GRAM")

# Команда /donate
async def donate(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("Использование: /donate сумма")
        return
    
    donate_amount = int(args[0])
    update_balance(user_id, donate_amount)
    
    # Обновление статуса
    current_status = get_status(user_id)
    new_status = 'No status'
    if donate_amount >= 1000:
        new_status = 'VIP'
    elif donate_amount >= 500:
        new_status = 'Gold'
    elif donate_amount >= 100:
        new_status = 'Silver'
    
    update_status(user_id, new_status)
    await update.message.reply_text(f"Спасибо за ваш донат! Ваш новый статус: {new_status}. Текущий баланс: {get_balance(user_id)} GRAM")

# Команда /tournament
async def tournament(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    cursor.execute('INSERT OR REPLACE INTO tournament (user_id, grams) VALUES (?, ?)', (user_id, balance))
    conn.commit()
    await update.message.reply_text(f"Вы успешно участвуете в турнире. Ваши GRAM: {balance}")

# Команда /leaderboard
async def leaderboard(update: Update, context: CallbackContext) -> None:
    cursor.execute('SELECT user_id, grams FROM tournament ORDER BY grams DESC LIMIT 10')
    results = cursor.fetchall()
    leaderboard_text = "Турнирная таблица:\n"
    for i, (user_id, grams) in enumerate(results, 1):
        leaderboard_text += f"{i}. User {user_id}: {grams} GRAM\n"
    await update.message.reply_text(leaderboard_text)

# Команда /business
async def business(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("Использование: /business Бизнес/Ферма/Карьер")
        return
    
    business_type = args[0].lower()
    cursor.execute('INSERT OR IGNORE INTO businesses (user_id, business_type) VALUES (?, ?)', (user_id, business_type))
    conn.commit()
    await update.message.reply_text(f"Вы начали новый бизнес: {business_type.capitalize()}")

# Команда /upgrade
async def upgrade(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("Использование: /upgrade Бизнес/Ферма/Карьер")
        return
    
    business_type = args[0].lower()
    cursor.execute('SELECT level FROM businesses WHERE user_id = ? AND business_type = ?', (user_id, business_type))
    result = cursor.fetchone()
    if not result:
        await update.message.reply_text(f"У вас нет бизнеса типа {business_type.capitalize()}")
        return
    
    current_level = result[0]
    upgrade_cost = current_level * 100  # Стоимость улучшения увеличивается с уровнем
    balance = get_balance(user_id)
    
    if balance < upgrade_cost:
        await update.message.reply_text(f"Недостаточно средств для улучшения. Требуется: {upgrade_cost} GRAM")
        return
    
    update_balance(user_id, -upgrade_cost)
    cursor.execute('UPDATE businesses SET level = level + 1 WHERE user_id = ? AND business_type = ?', (user_id, business_type))
    conn.commit()
    await update.message.reply_text(f"Ваш бизнес {business_type.capitalize()} улучшен до уровня {current_level + 1}")

# Админ-панель
async def admin_panel(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user.username
    if user != "act_mk":
        await update.message.reply_text("У вас нет доступа к админ-панели.")
        return

    await update.message.reply_text("Добро пожаловать в админ-панель! Используйте команды для управления ботом.")

def main() -> None:
    application = Application.builder().token("YOUR TELEGRAM TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("deposit", deposit))
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("tournament", tournament))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("business", business))
    application.add_handler(CommandHandler("upgrade", upgrade))
    application.add_handler(CommandHandler("admin", admin_panel))

    application.run_polling()

if __name__ == '__main__':
    main()
