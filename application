import random
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# Настройка базы данных
conn = sqlite3.connect('casino.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS bets (user_id INTEGER, balance INTEGER)''')
conn.commit()

# Функция для получения баланса пользователя
def get_balance(user_id):
    cursor.execute('SELECT balance FROM bets WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# Функция для обновления баланса пользователя
def update_balance(user_id, amount):
    current_balance = get_balance(user_id)
    new_balance = current_balance + amount
    cursor.execute('INSERT OR REPLACE INTO bets (user_id, balance) VALUES (?, ?)', (user_id, new_balance))
    conn.commit()

# Команда /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    update_balance(user_id, 0)  # Инициализация пользователя с балансом 0
    await update.message.reply_text("Добро пожаловать в казино! Ваш текущий баланс: 0")

# Команда /balance
async def balance(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(f"Ваш текущий баланс: {balance}")

# Команда /roulette
async def roulette(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("Использование: /roulette к/ч сумма")
        return
    
    choice = args[0].lower()
    bet_amount = int(args[1])
    if choice not in ['к', 'ч']:
        await update.message.reply_text("Выберите 'к' для красного или 'ч' для черного.")
        return
    
    balance = get_balance(user_id)
    if bet_amount > balance:
        await update.message.reply_text("Недостаточно средств на балансе.")
        return
    
    update_balance(user_id, -bet_amount)
    
    outcome = random.choice(['к', 'ч'])
    if outcome == choice:
        winnings = bet_amount * 2
        update_balance(user_id, winnings)
        await update.message.reply_text(f"Вы выиграли! Ваш выигрыш: {winnings}. Текущий баланс: {get_balance(user_id)}")
    else:
        await update.message.reply_text(f"Вы проиграли. Выпало: {outcome}. Текущий баланс: {get_balance(user_id)}")

# Команда /casino
async def casino(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("Использование: /casino сумма")
        return
    
    bet_amount = int(args[0])
    balance = get_balance(user_id)
    if bet_amount > balance:
        await update.message.reply_text("Недостаточно средств на балансе.")
        return
    
    update_balance(user_id, -bet_amount)
    
    outcome = random.randint(0, 36)  # Рулетка с 37 числами (0-36)
    if outcome == 0:
        winnings = bet_amount * 35  # Выплата 35 к 1 за 0
        update_balance(user_id, winnings)
        await update.message.reply_text(f"Вы выиграли! Выпало 0. Ваш выигрыш: {winnings}. Текущий баланс: {get_balance(user_id)}")
    else:
        await update.message.reply_text(f"Вы проиграли. Выпало: {outcome}. Текущий баланс: {get_balance(user_id)}")

# Команда /spin
async def spin(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("Использование: /spin сумма")
        return
    
    bet_amount = int(args[0])
    balance = get_balance(user_id)
    if bet_amount > balance:
        await update.message.reply_text("Недостаточно средств на балансе.")
        return
    
    update_balance(user_id, -bet_amount)
    
    outcome = random.randint(1, 6)  # Кости с 6 сторонами
    if outcome == 6:
        winnings = bet_amount * 5  # Выплата 5 к 1 за выпадение 6
        update_balance(user_id, winnings)
        await update.message.reply_text(f"Вы выиграли! Выпало 6. Ваш выигрыш: {winnings}. Текущий баланс: {get_balance(user_id)}")
    else:
        await update.message.reply_text(f"Вы проиграли. Выпало: {outcome}. Текущий баланс: {get_balance(user_id)}")

def main() -> None:
    application = Application.builder().token("7294993191:AAEFCphfC1PraUbSkD8IyWvTEg6qGGyvAtQ").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("roulette", roulette))
    application.add_handler(CommandHandler("casino", casino))
    application.add_handler(CommandHandler("spin", spin))

    application.run_polling()

if __name__ == '__main__':
    main()
